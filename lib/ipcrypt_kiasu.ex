defmodule IPCrypt.Kiasu do
  @moduledoc """
  Implementation of KIASU-BC tweakable block cipher for ipcrypt-nd.
  """

  import Bitwise

  # AES S-box
  @sbox [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
  ]

  # AES inverse S-box
  @inv_sbox [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
  ]

  # AES round constants
  @rcon [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]

  # Precomputed multiplication tables for AES operations
  @mul2 for x <- 0..255, do: Bitwise.bxor(:binary.decode_unsigned(<<x <<< 1>>), if((x &&& 0x80) != 0, do: 0x1B, else: 0))
  @mul3 for x <- 0..255, do: Bitwise.bxor(Enum.at(@mul2, x), x)

  @doc """
  Encrypts using KIASU-BC construction.

  ## Parameters
  - key: 16-byte encryption key
  - tweak: 8-byte tweak
  - plaintext: 16-byte plaintext

  ## Returns
  - 16-byte ciphertext
  """
  def encrypt(key, tweak, plaintext)
      when byte_size(key) == 16 and byte_size(tweak) == 8 and byte_size(plaintext) == 16 do
    round_keys = expand_key(key)
    padded_tweak = pad_tweak(tweak)

    # Initial round
    state =
      plaintext
      |> xor_bytes(Enum.at(round_keys, 0))
      |> xor_bytes(padded_tweak)

    # Main rounds
    state =
      1..9
      |> Enum.reduce(state, fn round, acc ->
        acc
        |> sub_bytes()
        |> shift_rows()
        |> mix_columns()
        |> xor_bytes(Enum.at(round_keys, round))
        |> xor_bytes(padded_tweak)
      end)

    # Final round
    state
    |> sub_bytes()
    |> shift_rows()
    |> xor_bytes(Enum.at(round_keys, 10))
    |> xor_bytes(padded_tweak)
  end

  def encrypt(_key, _tweak, _plaintext) do
    {:error, "Invalid parameters: key must be 16 bytes, tweak must be 8 bytes, plaintext must be 16 bytes"}
  end

  @doc """
  Decrypts using KIASU-BC construction.

  ## Parameters
  - key: 16-byte encryption key
  - tweak: 8-byte tweak
  - ciphertext: 16-byte ciphertext

  ## Returns
  - 16-byte plaintext
  """
  def decrypt(key, tweak, ciphertext)
      when byte_size(key) == 16 and byte_size(tweak) == 8 and byte_size(ciphertext) == 16 do
    round_keys = expand_key(key)
    padded_tweak = pad_tweak(tweak)

    # Initial round (inverse final round)
    state =
      ciphertext
      |> xor_bytes(Enum.at(round_keys, 10))
      |> xor_bytes(padded_tweak)
      |> inv_shift_rows()
      |> inv_sub_bytes()

    # Main rounds (inverse)
    state =
      9..1//-1
      |> Enum.reduce(state, fn round, acc ->
        acc
        |> xor_bytes(Enum.at(round_keys, round))
        |> xor_bytes(padded_tweak)
        |> inv_mix_columns()
        |> inv_shift_rows()
        |> inv_sub_bytes()
      end)

    # Final round (inverse initial round)
    state
    |> xor_bytes(Enum.at(round_keys, 0))
    |> xor_bytes(padded_tweak)
  end

  def decrypt(_key, _tweak, _ciphertext) do
    {:error, "Invalid parameters: key must be 16 bytes, tweak must be 8 bytes, ciphertext must be 16 bytes"}
  end

  # Helper functions

  defp sub_bytes(state) do
    state
    |> :binary.bin_to_list()
    |> Enum.map(&Enum.at(@sbox, &1))
    |> :binary.list_to_bin()
  end

  defp inv_sub_bytes(state) do
    state
    |> :binary.bin_to_list()
    |> Enum.map(&Enum.at(@inv_sbox, &1))
    |> :binary.list_to_bin()
  end

  defp xor_bytes(a, b) do
    a
    |> :binary.bin_to_list()
    |> Enum.zip(:binary.bin_to_list(b))
    |> Enum.map(fn {x, y} -> Bitwise.bxor(x, y) end)
    |> :binary.list_to_bin()
  end

  defp rot_word(word) do
    <<a, b, c, d>> = word
    <<b, c, d, a>>
  end

  defp expand_key(key) when byte_size(key) == 16 do
    round_keys = [key]

    0..9
    |> Enum.reduce(round_keys, fn i, acc ->
      prev_key = List.last(acc)
      <<_::binary-size(12), temp::binary-size(4)>> = prev_key
      temp = rot_word(temp) |> sub_bytes()
      <<first_byte, rest::binary-size(3)>> = temp
      temp = <<Bitwise.bxor(first_byte, Enum.at(@rcon, i)), rest::binary>>

      new_key =
        0..3
        |> Enum.reduce(<<>>, fn j, key_acc ->
          word = :binary.part(prev_key, {j * 4, 4})

          word =
            if j == 0 do
              xor_bytes(word, temp)
            else
              <<prev_word::binary-size(4)>> = :binary.part(key_acc, {(j - 1) * 4, 4})
              xor_bytes(word, prev_word)
            end

          key_acc <> word
        end)

      acc ++ [new_key]
    end)
  end

  defp pad_tweak(tweak) when byte_size(tweak) == 8 do
    <<t0, t1, t2, t3, t4, t5, t6, t7>> = tweak

    <<t0, t1, 0, 0, t2, t3, 0, 0, t4, t5, 0, 0, t6, t7, 0, 0>>
  end

  defp shift_rows(state) do
    <<s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15>> = state

    <<s0, s5, s10, s15, s4, s9, s14, s3, s8, s13, s2, s7, s12, s1, s6, s11>>
  end

  defp inv_shift_rows(state) do
    <<s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15>> = state

    <<s0, s13, s10, s7, s4, s1, s14, s11, s8, s5, s2, s15, s12, s9, s6, s3>>
  end

  defp mix_columns(state) do
    state
    |> :binary.bin_to_list()
    |> Enum.chunk_every(4)
    |> Enum.map(fn [s0, s1, s2, s3] ->
      [
        Bitwise.bxor(
          Bitwise.bxor(Bitwise.bxor(Enum.at(@mul2, s0), Enum.at(@mul3, s1)), s2),
          s3
        ),
        Bitwise.bxor(
          Bitwise.bxor(Bitwise.bxor(s0, Enum.at(@mul2, s1)), Enum.at(@mul3, s2)),
          s3
        ),
        Bitwise.bxor(
          Bitwise.bxor(Bitwise.bxor(s0, s1), Enum.at(@mul2, s2)),
          Enum.at(@mul3, s3)
        ),
        Bitwise.bxor(
          Bitwise.bxor(Bitwise.bxor(Enum.at(@mul3, s0), s1), s2),
          Enum.at(@mul2, s3)
        )
      ]
    end)
    |> List.flatten()
    |> :binary.list_to_bin()
  end

  defp inv_mix_columns(state) do
    mul = fn a, b ->
      p = 0

      {result, _} =
        0..7
        |> Enum.reduce({p, {a, b}}, fn _, {p_acc, {a_acc, b_acc}} ->
          p_acc = if (b_acc &&& 1) != 0, do: Bitwise.bxor(p_acc, a_acc), else: p_acc
          hi_bit_set = (a_acc &&& 0x80) != 0
          a_acc = a_acc <<< 1
          a_acc = if hi_bit_set, do: Bitwise.bxor(a_acc, 0x1B), else: a_acc
          b_acc = b_acc >>> 1
          {p_acc, {a_acc &&& 0xFF, b_acc}}
        end)

      result &&& 0xFF
    end

    state
    |> :binary.bin_to_list()
    |> Enum.chunk_every(4)
    |> Enum.map(fn col ->
      [
        Bitwise.bxor(
          Bitwise.bxor(
            Bitwise.bxor(mul.(0x0E, Enum.at(col, 0)), mul.(0x0B, Enum.at(col, 1))),
            mul.(0x0D, Enum.at(col, 2))
          ),
          mul.(0x09, Enum.at(col, 3))
        ),
        Bitwise.bxor(
          Bitwise.bxor(
            Bitwise.bxor(mul.(0x09, Enum.at(col, 0)), mul.(0x0E, Enum.at(col, 1))),
            mul.(0x0B, Enum.at(col, 2))
          ),
          mul.(0x0D, Enum.at(col, 3))
        ),
        Bitwise.bxor(
          Bitwise.bxor(
            Bitwise.bxor(mul.(0x0D, Enum.at(col, 0)), mul.(0x09, Enum.at(col, 1))),
            mul.(0x0E, Enum.at(col, 2))
          ),
          mul.(0x0B, Enum.at(col, 3))
        ),
        Bitwise.bxor(
          Bitwise.bxor(
            Bitwise.bxor(mul.(0x0B, Enum.at(col, 0)), mul.(0x0D, Enum.at(col, 1))),
            mul.(0x09, Enum.at(col, 2))
          ),
          mul.(0x0E, Enum.at(col, 3))
        )
      ]
    end)
    |> List.flatten()
    |> :binary.list_to_bin()
  end
end